{"version":3,"sources":["component/FizzBuzz.js","component/ReactLevelOne.js","component/ReactLevelTwo.js","App.js","index.js"],"names":["FizzBuzz","useState","count","setCount","start","setStart","className","htmlFor","min","value","onChange","e","target","type","onClick","userData","name","ReactLevelOne","users","setUsers","useEffect","handleChange","checked","checkUser","map","user","isChecked","some","index","ReactLevelTwo","setUser","data","setData","error","setError","noResult","setNoResult","onSubmit","preventDefault","fetch","then","response","json","items","length","catch","id","item","login","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3744fe43.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst FizzBuzz = () => {\r\n  //On initialise les states\r\n    const [count, setCount] = useState('');\r\n    const [start, setStart] = useState(false);\r\n    //fonction pour changer l'état de nos states au clique\r\n    const handleChange = (e) => {\r\n        setCount(e.target.value)\r\n        setStart(false)\r\n    };\r\n\r\n    // fonction pour remettre à zéro\r\n    const resetRadioState = () => {setCount('')};\r\n\r\n    return (\r\n        <div className='fizzBuzz'>\r\n        <h1>FizzBuzz</h1>\r\n        <p>C'est simple tu entre un nombre, tu appuie sur Start, si il est divisible par 3, Fizz apparaîtra, si il est divible par 5, Buzz apparaîtra et si il est divible par 3 et 5 alors FizzBuzz apparaîtra.\r\n        Sinon le chiffre choisi apparaîtra.Tu peux réinitialiser avec Reset </p>\r\n        <label htmlFor='Numero'>Entre ton numero :</label>\r\n        <input min='1' value={count} onChange={handleChange} type='number'/>\r\n        {/* les fonctions sont appelées ici au clique */}\r\n        <button onClick={() =>setStart(true)}>Start</button>\r\n        <button onClick={resetRadioState}>Reset</button>\r\n        {/* Si start est à true on fait apparaitre le h2 */}\r\n        {start && <h2> \r\n            {/* Les diffèrentes conditions */}\r\n          { \r\n            (count === \"\") ? '' :\r\n            (count % 15 === 0) ? \"FizzBuzz\" : \r\n            (count % 3 === 0)  ? \"Fizz\"     : \r\n            (count % 5 === 0)  ? \"Buzz\"     : \r\n            count\r\n          }\r\n        </h2>} \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FizzBuzz;","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nconst userData = [\r\n    { name: \"Item 1\" },\r\n    { name: \"Item 2\" },\r\n    { name: \"Item 3\" },\r\n    { name: \"Item 4\" }\r\n  ];\r\n  \r\n  function ReactLevelOne() {\r\n    //initialisation des states dans un tableau vide\r\n    const [users, setUsers] = useState([]);\r\n  //Utilisation useEffect pour récuperer le tableau\r\n    useEffect(() => {\r\n      setUsers(userData);\r\n    }, []);\r\n  \r\n    const handleChange = (e) => {\r\n        //Optimisation du code pour ne pas à avoir a réécrire de longue phrase\r\n      const { name, checked } = e.target;\r\n      //Partie pour le checkBox allSelect\r\n      if (name === \"allSelect\") {\r\n        let checkUser = users.map((user) => {\r\n          return { ...user, isChecked: checked };\r\n        });\r\n        setUsers(checkUser);\r\n      } // Partie pour les autres checkBoxes\r\n      else {\r\n        let checkUser = users.map((user) =>\r\n          user.name === name ? { ...user, isChecked: checked } : user\r\n        );\r\n        setUsers(checkUser);\r\n      }\r\n    };\r\n  \r\n    return (\r\n\r\n        <form className='checkBoxes'>\r\n          <h1>Checkboxes</h1>\r\n          <div >\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"allSelect\"\r\n              //On verifie que tout les éléments sont cochés sinon on décoche la case\r\n              checked={!users.some((user) => user?.isChecked !== true)}\r\n              //On appel la fonction ici\r\n              onChange={handleChange}\r\n            />\r\n            <label>All Select</label>\r\n          </div>\r\n          {/* On utilise un map pour afficher les éléments du tableau users */}\r\n          {users.map((user, index) => (\r\n            <div key={index}>\r\n              <input\r\n                type=\"checkbox\"\r\n                name={user.name}\r\n                checked={user?.isChecked || false}\r\n                onChange={handleChange}\r\n              />\r\n              <label>{user.name}</label>\r\n            </div>\r\n          ))}\r\n        </form>);\r\n        }\r\n\r\nexport default ReactLevelOne;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst ReactLevelTwo = () => {\r\n  //On initialise les states ici.\r\n  const [user, setUser] = useState('');\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [noResult, setNoResult] = useState('');\r\n  //fonction pour récuperer la valeur de l'input et mettre a jour le state de error\r\n  const handleChange = (e) => {\r\n    if (error) {\r\n      setError('');\r\n    }\r\n\r\n    setUser(e.target.value);\r\n  };\r\n//fonction qui en fonction de l'information données dans l'input vas faire une requète fetch\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (user !== '') {\r\n      fetch(`https://api.github.com/search/users?q=${user}`)\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          //Un tableau ne sera jamais égale à un autre tableau alors la solution est de mettre .length en condition\r\n          if (data.items.length > 0) {\r\n            setNoResult('');\r\n            setData(data.items);\r\n          } //Si le tableau est vide on change les infos des diffèrent states\r\n          else {\r\n            setNoResult(\"Désolé, la recherche n'a rien donnée\");\r\n            setData(data.items);\r\n            setError('');\r\n          }\r\n        })//Si une erreur ce produit on l'as récupère ici\r\n        .catch((error) => {\r\n          setData([]);\r\n          setNoResult('');\r\n          setError(\"Une erreur s'est produite\");\r\n        });\r\n    } //Sinon on renvoie un tableau vide\r\n    else {\r\n\r\n      setData([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='fetchGithub'>\r\n      <h1>Fetch Github</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"user\">Search Github users :</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"user\"\r\n          name=\"user\"\r\n          value={user}\r\n          //La fonction est appelé ici\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\">Launch</button>\r\n      </form>\r\n      <div>\r\n      {/* Si la requête à fonction on fait un map des données récupérés et on les affiches dans une liste */}\r\n        {data.length > 0 && (\r\n          <ul>\r\n            {data.map((item) => (\r\n              <li key={item.id}>{item.login}</li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        {/* Sinon on affiche soit une erreur soit une recherche sans reponse */}\r\n        {noResult && <p>{noResult}</p>}\r\n        {error && <p>{error}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactLevelTwo;\r\n","\nimport './App.css';\nimport FizzBuzz from './component/FizzBuzz';\nimport ReactLevelOne from './component/ReactLevelOne';\nimport ReactLevelTwo from './component/ReactLevelTwo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <FizzBuzz/>\n    <ReactLevelOne/>\n    <ReactLevelTwo/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}